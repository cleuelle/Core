/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package downtothecore;
import javax.swing.event.*;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import java.util.*;
/**
 * @note Single-person project
 * @author Caleb Leuellen
 */
public class Core extends javax.swing.JFrame {
//Class Attributes
final private Player player = new Player();
final private Enemy enemy = new Enemy();
final private ArrayList<Item> items = new ArrayList<Item>();
final private Random random = new Random();
final private DefaultListModel model = new DefaultListModel();
final private double multiplier = 1.15;
private int pickaxeCost = 10;
private int heatProtCost = 50;
private int pressureSuitCost = 1;
private int potionCost = 30;
private int damagePlayer = 0;
private int damageEnemy = 0;
private int potionHeal = 10;
private int heatDamage = 0;

    /**
     * Creates new form Core
     */
    public Core() {
        //Initialize the GUI
        initComponents();
        //Create the first enemy (Ore)
        enemy.setType(0);
        //Start the timers that update stats and damage
        updateStats();
        playerDamageTimer();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LevelLabel = new javax.swing.JLabel();
        LevelNumber = new javax.swing.JLabel();
        ExpBar = new javax.swing.JProgressBar();
        HPLabel = new javax.swing.JLabel();
        DepthNumber = new javax.swing.JLabel();
        ATKLabel = new javax.swing.JLabel();
        HPBar = new javax.swing.JProgressBar();
        DEFLabel = new javax.swing.JLabel();
        DEFNumber = new javax.swing.JLabel();
        LCKLabel = new javax.swing.JLabel();
        LCKNumber = new javax.swing.JLabel();
        DepthLabel = new javax.swing.JLabel();
        ATKNumber = new javax.swing.JLabel();
        MetersLabel = new javax.swing.JLabel();
        TempLabel = new javax.swing.JLabel();
        FLabel = new javax.swing.JLabel();
        TempBar = new javax.swing.JProgressBar();
        PressureLabel = new javax.swing.JLabel();
        atmLabel = new javax.swing.JLabel();
        PressureBar = new javax.swing.JProgressBar();
        GoldLabel = new javax.swing.JLabel();
        GoldNumber = new javax.swing.JLabel();
        PickaxeLabel = new javax.swing.JLabel();
        PickaxeLevel = new javax.swing.JLabel();
        HeatProtLabel = new javax.swing.JLabel();
        HeatProtLevel = new javax.swing.JLabel();
        PressureSuitLabel = new javax.swing.JLabel();
        PressureSuitLevel = new javax.swing.JLabel();
        PotionLabel = new javax.swing.JLabel();
        PotionLevel = new javax.swing.JLabel();
        UpgradePresSuit = new javax.swing.JButton();
        UpgradePickaxe = new javax.swing.JButton();
        UpgradeHeatProtection = new javax.swing.JButton();
        UpgradePotion = new javax.swing.JButton();
        ScrollPane1 = new javax.swing.JScrollPane();
        ItemList = new javax.swing.JList<>(model);
        SellButton = new javax.swing.JButton();
        UseButton = new javax.swing.JButton();
        ScrollPane2 = new javax.swing.JScrollPane();
        ItemDescription = new javax.swing.JTextArea();
        EnemyName = new javax.swing.JLabel();
        EnemyHPLabel = new javax.swing.JLabel();
        EnemyHPBar = new javax.swing.JProgressBar();
        AttackButton = new javax.swing.JButton();
        HealButton = new javax.swing.JButton();
        EnemyATK = new javax.swing.JLabel();
        EnemyDEF = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N

        LevelLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LevelLabel.setText("Level");

        LevelNumber.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        LevelNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LevelNumber.setText("1");

        ExpBar.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        ExpBar.setToolTipText("");
        ExpBar.setString("0");
        ExpBar.setStringPainted(true);

        HPLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        HPLabel.setText("HP");

        DepthNumber.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        DepthNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        DepthNumber.setText("0");

        ATKLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ATKLabel.setText("ATK");

        HPBar.setBackground(new java.awt.Color(255, 255, 255));
        HPBar.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        HPBar.setForeground(new java.awt.Color(0, 0, 0));
        HPBar.setToolTipText("");
        HPBar.setValue(100);
        HPBar.setBorder(null);
        HPBar.setString("100");
        HPBar.setStringPainted(true);

        DEFLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DEFLabel.setText("DEF");

        DEFNumber.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        DEFNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        DEFNumber.setText("100");

        LCKLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LCKLabel.setText("LCK");

        LCKNumber.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        LCKNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LCKNumber.setText("100");

        DepthLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DepthLabel.setText("DEPTH");

        ATKNumber.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        ATKNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ATKNumber.setText("100");

        MetersLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MetersLabel.setText("m");

        TempLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        TempLabel.setText("TEMP");

        FLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        FLabel.setText("F");

        TempBar.setBackground(new java.awt.Color(255, 255, 255));
        TempBar.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        TempBar.setForeground(new java.awt.Color(0, 0, 0));
        TempBar.setMaximum(1200);
        TempBar.setToolTipText("");
        TempBar.setValue(600);
        TempBar.setString("60.0");
        TempBar.setStringPainted(true);

        PressureLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PressureLabel.setText("PRES");

        atmLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        atmLabel.setText("A");

        PressureBar.setBackground(new java.awt.Color(255, 255, 255));
        PressureBar.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        PressureBar.setForeground(new java.awt.Color(0, 0, 0));
        PressureBar.setMaximum(13000);
        PressureBar.setToolTipText("");
        PressureBar.setValue(10000);
        PressureBar.setString("1.00");
        PressureBar.setStringPainted(true);

        GoldLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        GoldLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/coin.png"))); // NOI18N
        GoldLabel.setText("G");

        GoldNumber.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        GoldNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        GoldNumber.setText("100");

        PickaxeLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PickaxeLabel.setText("PICKAXE");

        PickaxeLevel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        PickaxeLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PickaxeLevel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/level.png"))); // NOI18N
        PickaxeLevel.setText("0");

        HeatProtLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        HeatProtLabel.setText("HEAT PROTECTION");

        HeatProtLevel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        HeatProtLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HeatProtLevel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/level.png"))); // NOI18N
        HeatProtLevel.setText("0");

        PressureSuitLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PressureSuitLabel.setText("PRESSURE SUIT");

        PressureSuitLevel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        PressureSuitLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PressureSuitLevel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/level.png"))); // NOI18N
        PressureSuitLevel.setText("0");

        PotionLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PotionLabel.setText("POTION");

        PotionLevel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        PotionLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PotionLevel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/level.png"))); // NOI18N
        PotionLevel.setText("0");

        UpgradePresSuit.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        UpgradePresSuit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/coin.png"))); // NOI18N
        UpgradePresSuit.setText("1");
        UpgradePresSuit.setName(""); // NOI18N
        UpgradePresSuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpgradePresSuitActionPerformed(evt);
            }
        });

        UpgradePickaxe.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        UpgradePickaxe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/coin.png"))); // NOI18N
        UpgradePickaxe.setText("1");
        UpgradePickaxe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpgradePickaxeActionPerformed(evt);
            }
        });

        UpgradeHeatProtection.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        UpgradeHeatProtection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/coin.png"))); // NOI18N
        UpgradeHeatProtection.setText("5");
        UpgradeHeatProtection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpgradeHeatProtectionActionPerformed(evt);
            }
        });

        UpgradePotion.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        UpgradePotion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/coin.png"))); // NOI18N
        UpgradePotion.setText("3");
        UpgradePotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpgradePotionActionPerformed(evt);
            }
        });

        ItemList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ItemList.setModel(model);
        ItemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        ScrollPane1.setViewportView(ItemList);

        SellButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SellButton.setText("Sell");
        SellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellButtonActionPerformed(evt);
            }
        });

        UseButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        UseButton.setText("Use");
        UseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseButtonActionPerformed(evt);
            }
        });

        ItemDescription.setEditable(false);
        ItemDescription.setColumns(20);
        ItemDescription.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ItemDescription.setRows(5);
        ItemDescription.setText("-- Special Items --\nItems not in this list are only able to be sold.\nGreed crystal - Doubles money\nMega potion - Heals all HP\nDry ice - Decrease temperature\nDepressurizer - Decrease pressure");
        ScrollPane2.setViewportView(ItemDescription);

        EnemyName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EnemyName.setText("Enemy Name");

        EnemyHPLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EnemyHPLabel.setText("HP");

        EnemyHPBar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        EnemyHPBar.setString("0");
        EnemyHPBar.setStringPainted(true);

        AttackButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        AttackButton.setText("Attack");
        AttackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttackButtonActionPerformed(evt);
            }
        });

        HealButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        HealButton.setText("Heal");
        HealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HealButtonActionPerformed(evt);
            }
        });

        EnemyATK.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EnemyATK.setText("ATK 0");

        EnemyDEF.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EnemyDEF.setText("DEF 0");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/Ore.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UseButton)
                                    .addComponent(SellButton))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(AttackButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EnemyHPLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EnemyHPBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(HealButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(EnemyName, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(EnemyATK, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(EnemyDEF, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(22, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(DEFLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(DEFNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(LCKLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(LCKNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(GoldLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(GoldNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(PressureLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(PressureBar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ATKLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ATKNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TempLabel)
                                        .addGap(12, 12, 12)
                                        .addComponent(TempBar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(atmLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(PotionLabel)
                                            .addComponent(PressureSuitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(PressureSuitLevel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(PotionLevel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(FLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(HeatProtLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(HeatProtLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(HPLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(HPBar, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(LevelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LevelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ExpBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(DepthLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(DepthNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MetersLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(PickaxeLabel)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PickaxeLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UpgradePickaxe)
                            .addComponent(UpgradeHeatProtection)
                            .addComponent(UpgradePresSuit)
                            .addComponent(UpgradePotion))
                        .addGap(78, 78, 78))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LevelLabel)
                    .addComponent(LevelNumber)
                    .addComponent(ExpBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HPLabel)
                    .addComponent(HPBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DepthLabel)
                    .addComponent(DepthNumber)
                    .addComponent(MetersLabel)
                    .addComponent(PickaxeLabel)
                    .addComponent(PickaxeLevel)
                    .addComponent(UpgradePickaxe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ATKLabel)
                    .addComponent(TempLabel)
                    .addComponent(FLabel)
                    .addComponent(TempBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(HeatProtLabel)
                    .addComponent(HeatProtLevel)
                    .addComponent(UpgradeHeatProtection)
                    .addComponent(ATKNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DEFLabel)
                        .addComponent(PressureLabel)
                        .addComponent(atmLabel)
                        .addComponent(PressureBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PressureSuitLabel)
                        .addComponent(PressureSuitLevel)
                        .addComponent(UpgradePresSuit))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DEFNumber)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LCKLabel)
                        .addComponent(LCKNumber)
                        .addComponent(GoldLabel)
                        .addComponent(GoldNumber))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PotionLabel)
                        .addComponent(PotionLevel)
                        .addComponent(UpgradePotion)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EnemyName)
                            .addComponent(EnemyATK)
                            .addComponent(EnemyDEF, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(EnemyHPLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(AttackButton))
                            .addComponent(EnemyHPBar, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HealButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SellButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UseButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public void updateJList() {
        //Updates the JList model using elements from ArrayList
        for (int i = 0; i < items.size(); i++) {
            model.setSize(items.size());
            model.setElementAt(items.get(i).getName(), i);
        }
   }
    
        
    
    public void updateStats() {
        //This method dynamically updates each of the variable stats.
        //Doing this with a while (true) loop instead of a timer immediately causes a crash.
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
        @Override
        public void run() {
        if (player.getHP() < 1) {
        //Displays game over message and ends timer loop when HP is below 1
        JOptionPane.showMessageDialog(null, "The game is over. You scored:" + player.getTotalExp());
        System.exit(0);}
        while (player.getHP() > 0) {
        //Damage calculations (ATK - DEF)
        if (enemy.getATK() - player.getDef() < 0) {
            damagePlayer = 0;
        }
        else {
            damagePlayer = enemy.getATK() - player.getDef();
        }
        if (player.getAtk() - enemy.getDEF() < 1)
            damageEnemy = 1;
        else {
            damageEnemy = player.getAtk() - enemy.getDEF();
        }
        HPBar.setString(player.getHP() + "");
        ATKNumber.setText(player.getAtk() + "");
        DEFNumber.setText(player.getDef() + "");
        LCKNumber.setText(player.getLuck() + "");
        DepthNumber.setText(player.getDepth() + "");
        GoldNumber.setText(player.getGold() + "");
        LevelNumber.setText(player.getLevel() + "");
        HPBar.setValue(player.getHP());
        HPBar.setMaximum(player.getMaxHP());
        ExpBar.setValue(player.getCurExp());
        ExpBar.setMaximum(player.getRequiredExp());
        ExpBar.setString("" + player.getTotalExp());
        TempBar.setString(String.format("%.01f",player.getTemperature()));
        TempBar.setValue((int) player.getTemperature()*10);
        PressureBar.setString(String.format("%.02f",(float)player.getPressure()/10000));
        PressureBar.setValue(player.getPressure());
        EnemyName.setText(enemy.getName());
        EnemyHPBar.setString("" + enemy.getHP());
        EnemyHPBar.setValue(enemy.getHP());
        EnemyHPBar.setMaximum(enemy.getMaxHP());
        UpgradePickaxe.setText("" + pickaxeCost);
        PickaxeLevel.setText("" + player.getPickUpgrade());
        UpgradeHeatProtection.setText("" + heatProtCost);
        HeatProtLevel.setText("" + player.getHeatProtUpgrade());
        UpgradePresSuit.setText("" + pressureSuitCost);
        PressureSuitLevel.setText("" + player.getPressureSuitUpgrade());
        UpgradePotion.setText("" + potionCost);
        PotionLevel.setText("" + player.getPotionUpgrade());
        EnemyATK.setText("ATK " + enemy.getATK());
        EnemyDEF.setText("DEF " + enemy.getDEF());
        }
      }
    }, 0, 1);
   }

    public void playerDamageTimer() {
        //Player takes damage every 250ms instead of 1ms
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                player.setHP(player.getHP() - damagePlayer);
                //If temperature hits maximum limit
                if (TempBar.getValue() == TempBar.getMaximum()) {
                    //Start damaging player from heat
                    heatDamage = heatDamage + 1;
                    player.setHP(player.getHP() - heatDamage);
                }
                
                //If pressure hits maximum limit
                if (PressureBar.getValue() == PressureBar.getMaximum()) {
                    //Kills player in 2 seconds at full HP
                    player.setHP(player.getHP() - (player.getMaxHP()/8));
                }
            }
        }, 0, 250);
    }
    public void resetEnemy() {
        //Randomizes next enemy
        enemy.setType(random.nextInt(21));
    }
    public void enemyIcon() {
        //Sets the enemy appearance
        if ("Ore".equals(enemy.getName())) {
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/Ore.png")));
        }
        if ("Slime".equals(enemy.getName())) {
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/Slime.png")));
        }
        if ("Zombie".equals(enemy.getName())) {
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/Zombie.png")));
        }
        if ("Skeleton".equals(enemy.getName())) {
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/downtothecore/Skeleton.png")));
        }
    }
    public void enemyDeath() {
        //Method to run when enemy is killed
        
        //Give about ~25% chance to drop an item on death
        if (enemy.getDroppedItem() != null && random.nextInt(100) > 74) {
        items.add(enemy.getDroppedItem());
        }
        //Alphabetize items
        Collections.sort(items);
        resetEnemy();
        enemyIcon();
        updateJList();
        enemy.setNumKilled(enemy.getNumKilled()+1);
        //Various player stats go up when an enemy dies
        player.setGold(player.getGold()+enemy.getGold()+(player.getLuck()*2));
        player.setCurExp(player.getCurExp()+enemy.getEXP());
        player.setTotalExp(player.getTotalExp()+enemy.getEXP());
        player.setDepth(player.getDepth() + random.nextInt(20));
        player.setTemperature(60 + (.105f * player.getDepth()));
        player.setPressure(10000 + (3 * player.getDepth()/2));
    }
   
    //The following methods indicate button logic
    
    private void UpgradePresSuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpgradePresSuitActionPerformed
        if (player.getGold() >= pressureSuitCost) {
            player.setGold(player.getGold() - pressureSuitCost);
            player.setPressureSuitUpgrade(player.getPressureSuitUpgrade() + 1);
            player.setDef(player.getDef()+(5*player.getPressureSuitUpgrade()));
            PressureBar.setMaximum(PressureBar.getMaximum() + 1000);
            pressureSuitCost = pressureSuitCost * 10;
        }
    }//GEN-LAST:event_UpgradePresSuitActionPerformed

    private void UpgradePickaxeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpgradePickaxeActionPerformed
        // TODO add your handling code here:
        if (player.getGold() >= pickaxeCost) {
            player.setGold(player.getGold() - pickaxeCost);
            player.setPickUpgrade(player.getPickUpgrade() + 1);
            player.setAtk(player.getAtk() + 1 + player.getPickUpgrade()/5);
            pickaxeCost = (int)(pickaxeCost * (multiplier));
            
        }
    }//GEN-LAST:event_UpgradePickaxeActionPerformed

    private void UpgradeHeatProtectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpgradeHeatProtectionActionPerformed
        if (player.getGold() >= heatProtCost) {
            int increment = 50;
            increment = increment + 10;
            player.setGold(player.getGold() - heatProtCost);
            player.setHeatProtUpgrade(player.getHeatProtUpgrade() + 1);
            player.setDef(player.getDef() + 3 + player.getHeatProtUpgrade()/5);
            TempBar.setMaximum(TempBar.getMaximum()+50);
            heatProtCost = (int)((heatProtCost + (increment)) * 1.1);
        }
    }//GEN-LAST:event_UpgradeHeatProtectionActionPerformed

    private void UpgradePotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpgradePotionActionPerformed
        if (player.getGold() >= potionCost) {
            
            player.setGold(player.getGold() - potionCost);
            player.setPotionUpgrade(player.getPotionUpgrade() + 1);
            player.setmaxHP(player.getMaxHP() + 10 + 2*player.getHeatProtUpgrade());
            potionCost = (int)(potionCost * 1.4);
            potionHeal = (int)(potionHeal * 1.2);
        }
    }//GEN-LAST:event_UpgradePotionActionPerformed

    private void SellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellButtonActionPerformed
        //Determine how much to give player for selling items (Scales by level)
        if ("Shiny stone".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(30*(player.getLevel()/2)));
        }
        if ("Coal".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(100*(player.getLevel()/2)));
        }
        if ("Copper".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(200*(player.getLevel()/2)));
        }
        if ("Iron".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(400*(player.getLevel()/2)));
        }
        if ("Gold".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(2500*(player.getLevel()/2)));
        }
        if ("Diamond".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(10000*(player.getLevel()/2)));
        }
        if ("Jelly".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(50*(player.getLevel()/2)));
        }
        if ("Bone".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(75*(player.getLevel()/2)));
        }
        if ("Greed crystal".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(5000*(player.getLevel()/2)));
        }
        if ("Mega potion".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(5000*(player.getLevel()/2)));
        }
        if ("Dry ice".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(5000*(player.getLevel()/2)));
        }
        if ("Depressurizer".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()+(5000*(player.getLevel()/2)));
        }
        //Checks for lack of selection or if list is empty to avoid "IndexOutofBounds"
        if (!model.isEmpty() && ItemList.getSelectedIndex() != -1) {
        items.remove(ItemList.getSelectedIndex());
        model.removeElementAt(ItemList.getSelectedIndex());
        }
    }//GEN-LAST:event_SellButtonActionPerformed

    private void UseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseButtonActionPerformed
        //Enables use button only for the 4 special item types
        if ("Greed crystal".equals(ItemList.getSelectedValue())) {
            player.setGold(player.getGold()*2);
            if (!model.isEmpty() && ItemList.getSelectedIndex() != -1) {
            items.remove(ItemList.getSelectedIndex());
            model.removeElementAt(ItemList.getSelectedIndex());
        }
        }
        if ("Mega potion".equals(ItemList.getSelectedValue())) {
            player.setHP(player.getMaxHP());
            if (!model.isEmpty() && ItemList.getSelectedIndex() != -1) {
            items.remove(ItemList.getSelectedIndex());
            model.removeElementAt(ItemList.getSelectedIndex());
        }
        }
        if ("Dry ice".equals(ItemList.getSelectedValue())) {
            player.setTemperature(player.getTemperature()-5);
            if (!model.isEmpty() && ItemList.getSelectedIndex() != -1) {
            items.remove(ItemList.getSelectedIndex());
            model.removeElementAt(ItemList.getSelectedIndex());
        }
        }
        if ("Depressurizer".equals(ItemList.getSelectedValue())) {
            player.setPressure(player.getPressure() - 500);
            if (!model.isEmpty() && ItemList.getSelectedIndex() != -1) {
            items.remove(ItemList.getSelectedIndex());
            model.removeElementAt(ItemList.getSelectedIndex());
        }
     }
       
    }//GEN-LAST:event_UseButtonActionPerformed

    private void AttackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AttackButtonActionPerformed
     //Damage enemy each click
     enemy.setHP(enemy.getHP()-damageEnemy);
     if (enemy.getHP() < 1) {
         //If enemy dies call enemyDeath();
         enemyDeath();
     }
    }//GEN-LAST:event_AttackButtonActionPerformed

    private void HealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HealButtonActionPerformed
        // Heal the player based on how upgraded the Potion is        
            player.setHP(player.getHP() + potionHeal);
        
    }//GEN-LAST:event_HealButtonActionPerformed

   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Core.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Core.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Core.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Core.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Core().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ATKLabel;
    private javax.swing.JLabel ATKNumber;
    private javax.swing.JButton AttackButton;
    private javax.swing.JLabel DEFLabel;
    private javax.swing.JLabel DEFNumber;
    private javax.swing.JLabel DepthLabel;
    private javax.swing.JLabel DepthNumber;
    private javax.swing.JLabel EnemyATK;
    private javax.swing.JLabel EnemyDEF;
    private javax.swing.JProgressBar EnemyHPBar;
    private javax.swing.JLabel EnemyHPLabel;
    private javax.swing.JLabel EnemyName;
    private javax.swing.JProgressBar ExpBar;
    private javax.swing.JLabel FLabel;
    private javax.swing.JLabel GoldLabel;
    private javax.swing.JLabel GoldNumber;
    private javax.swing.JProgressBar HPBar;
    private javax.swing.JLabel HPLabel;
    private javax.swing.JButton HealButton;
    private javax.swing.JLabel HeatProtLabel;
    private javax.swing.JLabel HeatProtLevel;
    private javax.swing.JTextArea ItemDescription;
    private javax.swing.JList<String> ItemList;
    private javax.swing.JLabel LCKLabel;
    private javax.swing.JLabel LCKNumber;
    private javax.swing.JLabel LevelLabel;
    private javax.swing.JLabel LevelNumber;
    private javax.swing.JLabel MetersLabel;
    private javax.swing.JLabel PickaxeLabel;
    private javax.swing.JLabel PickaxeLevel;
    private javax.swing.JLabel PotionLabel;
    private javax.swing.JLabel PotionLevel;
    private javax.swing.JProgressBar PressureBar;
    private javax.swing.JLabel PressureLabel;
    private javax.swing.JLabel PressureSuitLabel;
    private javax.swing.JLabel PressureSuitLevel;
    private javax.swing.JScrollPane ScrollPane1;
    private javax.swing.JScrollPane ScrollPane2;
    private javax.swing.JButton SellButton;
    private javax.swing.JProgressBar TempBar;
    private javax.swing.JLabel TempLabel;
    private javax.swing.JButton UpgradeHeatProtection;
    private javax.swing.JButton UpgradePickaxe;
    private javax.swing.JButton UpgradePotion;
    private javax.swing.JButton UpgradePresSuit;
    private javax.swing.JButton UseButton;
    private javax.swing.JLabel atmLabel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
